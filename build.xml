<!--
  NOTE: The following will be modified to include any other contributors.

  Ant build file for Grizzled Scala utility library
  ===========================================================================
  $Id$

  This software is released under a BSD-style license:

  Copyright (c) 2009 Brian M. Clapper. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1.  Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

  2.  The end-user documentation included with the redistribution, if any,
      must include the following acknowlegement:

        "This product includes software developed by Brian M. Clapper
        (bmc@clapper.org, http://www.clapper.org/bmc/). That software is
        copyright (c) 2009 Brian M. Clapper."

      Alternately, this acknowlegement may appear in the software itself,
      if wherever such third-party acknowlegements normally appear.

  3.  Neither the names "clapper.org", "Grizzled Scala Utility Library",
      nor any of the names of the project contributors may be used to
      endorse or promote products derived from this software without prior
      written permission. For written permission, please contact
      bmc@clapper.org.

  4.  Products derived from this software may not be called "Grizzled
      Scala Utility Library", nor may "clapper.org" appear in their names
      without prior written permission of Brian M. Clapper.

  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
  NO EVENT SHALL BRIAN M. CLAPPER BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<project name="grizzled" default="lib" basedir=".">
  <description>
    Build file for Grizzled Scala library
  </description>

  <!--
  ***************************************************************************
                                Properties
  ***************************************************************************
  -->

  <property environment="env"/>

  <condition property="scala.home" value="${env.SCALA_HOME}">
    <isset property="env.SCALA_HOME"/>
  </condition>
  <fail unless="scala.home">
You must set the SCALA_HOME environment variable.
  </fail>

  <property name="scala.lib" value="${scala.home}/lib"/>
  <property name="scala.compiler" value="${scala.lib}/scala-compiler.jar"/>
  <property name="scala.library" value="${scala.lib}/scala-library.jar"/>
  <property name="scala.extra.lib.dir" value="${scala.home}/../extra/lib/"/>

  <dirname property="top.dir" file="${ant.file}"/> <!-- path to this dir -->
  <property name="src.top.relative" value="src"/>
  <property name="src.top" location="${src.top.relative}"/>
  <property name="scala.src.dir" location="${src.top}/grizzled"/>
  <property name="scripts.src.dir" location="${src.top}/scripts"/>

  <property name="build.dir.relative" value="build"/>
  <property name="build.dir"  location="${build.dir.relative}"/>

  <property name="build.classes.dir" location="${build.dir}/classes"/>
  <property name="test.classes.dir" location="${build.dir}/test/classes"/>

  <property name="docs.dir" value="${top.dir}/docs"/>

  <property name="code.jar.name" value="grizzled"/>
  <property name="code.jar.file" value="${code.jar.name}.jar"/>
  <property name="code.jar.path" value="${build.dir}/lib/${code.jar.file}"/>
  <property name="docs.top.dir" value="${top.dir}/docs"/>
  <property name="docs.api.dir" value="${docs.top.dir}/api"/>

  <property name="javac.debug" value="false"/>
  <property name="javac.compilerargs" value=""/>

  <property file="build.properties"/>
  <!--
  ***************************************************************************
                             Tasks and Macros
  ***************************************************************************
  -->

  <taskdef resource="scala/tools/ant/antlib.xml">
    <classpath>
      <pathelement location="${scala.compiler}"/>
      <pathelement location="${scala.library}"/>
    </classpath>
  </taskdef>

  <path id="test.classpath">
    <pathelement location="${scala.library}"/>
    <pathelement location="${build.classes.dir}"/>
    <fileset dir="${scala.extra.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="lib.classpath">
    <pathelement location="${scala.library}"/>

    <fileset dir="${scala.extra.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>

    <fileset dir="${scala.lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestTask">
    <classpath>
      <fileset dir="${scala.lib}">
        <include name="**/*.jar"/>
      </fileset>

      <fileset dir="${scala.extra.lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </classpath>
  </taskdef>

  <!--
  ***************************************************************************
                          Initialization Targets
  ***************************************************************************
  -->

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp>
      <format property="build.date" pattern="dd MMMM, yyyy HH:mm:ss z"
              locale="en"/>
    </tstamp>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${test.classes.dir}"/>
    <depend srcdir="${scala.src.dir}" destdir="${build.classes.dir}"/>
  </target>

  <!--
  ***************************************************************************
                               Code Targets
  ***************************************************************************
  -->

  <target name="all" depends="compile,jar,scaladoc"/>
  <target name="build" depends="compile,test"/>
  <target name="compile" depends="init,lib"/>
  <target name="compile-all" depends="compile, test.compile"/>

  <target name="lib" depends="init">
    <scalac addparams=""
            destdir="${build.classes.dir}"
            encoding="ISO-8859-1"
            includes="**/*.scala"
            excludes="**/test/*.scala"
            sourcepath=""
            deprecation="yes"
            unchecked="yes"
            srcdir="${scala.src.dir}"
            classpathref="lib.classpath"
            target="jvm-1.5"/>
  </target>

  <target name="test.compile" depends="init">
    <scalac addparams=""
            destdir="${test.classes.dir}"
            encoding="ISO-8859-1"
            includes="**/test/*.scala"
            excludes=""
            sourcepath=""
            deprecation="yes"
            unchecked="yes"
            srcdir="${scala.src.dir}"
            classpathref="test.classpath"
            target="jvm-1.5"/>
  </target>

  <!--
  ***************************************************************************
                               Test Targets
  ***************************************************************************
  -->

  <target name="test.nodep" depends="" description="Run tests">
    <scalatest>
      <runpath>
        <pathelement location="${test.classes.dir}"/>
        <pathelement location="${build.classes.dir}"/>
      </runpath>
      <reporter type="stdout" config=""/>
    </scalatest>
  </target>

  <target name="test" depends="test.compile, test.nodep"
          description="Run tests"/>

  <!--
  ***************************************************************************
                              Doc targets
  ***************************************************************************
  -->

  <target name="doc" depends="scaladoc"
          description="Generate API Docs"/>
  <target name="docs" depends="doc"/>

  <target depends="init" name="scaladoc">
    <mkdir dir="${docs.api.dir}"/>
    <scaladoc srcdir="${scala.src.dir}"
              destdir="${docs.api.dir}"
              windowtitle="Grizzled Scala Library"
              deprecation="yes"
              unchecked="yes"
              doctitle="Grizzled Scala Library"
              stylesheetfile="${src.top}/style.css"
              header="Grizzled Scala Library"
              footer="Copyright 2009 Brian M. Clapper"
              classpathref="lib.classpath">
      <include name="**/*.scala"/>
      <exclude name="**/test/*.scala"/>
    </scaladoc>
  </target>

  <!--
  ***************************************************************************
                             Packaging Targets
  ***************************************************************************
  -->

  <target name="jar" depends="grizzled.jar"
          description="Synonym for 'grizzled.jar'"/>

  <target name="grizzled.jar" depends="compile-all"
          description="Generate the distribution">
    <mkdir dir="${build.dir}/lib"/>
    <jar jarfile="${code.jar.path}" basedir="${build.classes.dir}"/>
  </target>

  <!--
  ***************************************************************************
                             Clean-up Targets
  ***************************************************************************
  -->

  <target name="clean"
        description="clean up" >

    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${build.dir}"/>
      <fileset dir="${docs.top.dir}"/>
    </delete>
  </target>
</project>
